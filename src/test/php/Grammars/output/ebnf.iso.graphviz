digraph {
"syntax" ;
    "syntax" -> "string_literal[2]" ;
    "syntax" -> "rule[syntax][3]" ;
      "rule[syntax][3]" -> "syntax[4]" ;
      "rule[syntax][3]" -> "sequence[5]" ;
        "sequence[5]" -> "optional_expression[6]" ;
          "optional_expression[6]" -> "syntax_title[7]" ;
        "sequence[5]" -> "string_literal[8]" ;
        "sequence[5]" -> "repeated_expression[9]" ;
          "repeated_expression[9]" -> "COMMENT[10]" ;
        "sequence[5]" -> "repeated_expression[11]" ;
          "repeated_expression[11]" -> "sequence[12]" ;
            "sequence[12]" -> "rule[13]" ;
            "sequence[12]" -> "COMMENT[14]" ;
        "sequence[5]" -> "string_literal[15]" ;
        "sequence[5]" -> "optional_expression[16]" ;
          "optional_expression[16]" -> "syntax_comment[17]" ;
    "syntax" -> "rule[syntax_title][18]" ;
      "rule[syntax_title][18]" -> "syntax_title[19]" ;
      "rule[syntax_title][18]" -> "STRING_LITERAL[20]" ;
    "syntax" -> "rule[syntax_comment][21]" ;
      "rule[syntax_comment][21]" -> "syntax_comment[22]" ;
      "rule[syntax_comment][21]" -> "STRING_LITERAL[23]" ;
    "syntax" -> "rule[rule][24]" ;
      "rule[rule][24]" -> "rule[25]" ;
      "rule[rule][24]" -> "sequence[26]" ;
        "sequence[26]" -> "identifier[27]" ;
        "sequence[26]" -> "grouped_expression[28]" ;
          "grouped_expression[28]" -> "alternative[29]" ;
            "alternative[29]" -> "string_literal[30]" ;
            "alternative[29]" -> "string_literal[31]" ;
            "alternative[29]" -> "string_literal[32]" ;
        "sequence[26]" -> "expression[33]" ;
        "sequence[26]" -> "grouped_expression[34]" ;
          "grouped_expression[34]" -> "alternative[35]" ;
            "alternative[35]" -> "string_literal[36]" ;
            "alternative[35]" -> "string_literal[37]" ;
    "syntax" -> "rule[expression][38]" ;
      "rule[expression][38]" -> "expression[39]" ;
      "rule[expression][38]" -> "sequence[40]" ;
        "sequence[40]" -> "term[41]" ;
        "sequence[40]" -> "repeated_expression[42]" ;
          "repeated_expression[42]" -> "sequence[43]" ;
            "sequence[43]" -> "string_literal[44]" ;
            "sequence[43]" -> "term[45]" ;
    "syntax" -> "rule[term][46]" ;
      "rule[term][46]" -> "term[47]" ;
      "rule[term][46]" -> "sequence[48]" ;
        "sequence[48]" -> "factor[49]" ;
        "sequence[48]" -> "repeated_expression[50]" ;
          "repeated_expression[50]" -> "sequence[51]" ;
            "sequence[51]" -> "string_literal[52]" ;
            "sequence[51]" -> "factor[53]" ;
    "syntax" -> "rule[factor][54]" ;
      "rule[factor][54]" -> "factor[55]" ;
      "rule[factor][54]" -> "alternative[56]" ;
        "alternative[56]" -> "IDENTIFIER[57]" ;
        "alternative[56]" -> "STRING_LITERAL[58]" ;
        "alternative[56]" -> "SPECIAL_SEQUENCE[59]" ;
        "alternative[56]" -> "optional_expression[60]" ;
        "alternative[56]" -> "grouped_expression[61]" ;
        "alternative[56]" -> "repeated_expression[62]" ;
    "syntax" -> "rule[optional_expression][63]" ;
      "rule[optional_expression][63]" -> "optional_expression[64]" ;
      "rule[optional_expression][63]" -> "sequence[65]" ;
        "sequence[65]" -> "string_literal[66]" ;
        "sequence[65]" -> "expression[67]" ;
        "sequence[65]" -> "string_literal[68]" ;
    "syntax" -> "rule[grouped_expression][69]" ;
      "rule[grouped_expression][69]" -> "grouped_expression[70]" ;
      "rule[grouped_expression][69]" -> "sequence[71]" ;
        "sequence[71]" -> "string_literal[72]" ;
        "sequence[71]" -> "expression[73]" ;
        "sequence[71]" -> "string_literal[74]" ;
    "syntax" -> "rule[repeated_expression][75]" ;
      "rule[repeated_expression][75]" -> "repeated_expression[76]" ;
      "rule[repeated_expression][75]" -> "sequence[77]" ;
        "sequence[77]" -> "string_literal[78]" ;
        "sequence[77]" -> "expression[79]" ;
        "sequence[77]" -> "string_literal[80]" ;
    "syntax" -> "comment[81]" ;
    "syntax" -> "rule[IDENTIFIER][82]" ;
      "rule[IDENTIFIER][82]" -> "IDENTIFIER[83]" ;
      "rule[IDENTIFIER][82]" -> "sequence[84]" ;
        "sequence[84]" -> "LETTER[85]" ;
        "sequence[84]" -> "repeated_expression[86]" ;
          "repeated_expression[86]" -> "alternative[87]" ;
            "alternative[87]" -> "string_literal[88]" ;
            "alternative[87]" -> "LETTER[89]" ;
            "alternative[87]" -> "DECIMAL_DIGIT[90]" ;
    "syntax" -> "rule[LETTER][91]" ;
      "rule[LETTER][91]" -> "LETTER[92]" ;
      "rule[LETTER][91]" -> "string_literal[93]" ;
    "syntax" -> "rule[DECIMAL_DIGIT][94]" ;
      "rule[DECIMAL_DIGIT][94]" -> "DECIMAL_DIGIT[95]" ;
      "rule[DECIMAL_DIGIT][94]" -> "string_literal[96]" ;
    "syntax" -> "rule[STRING_LITERAL][97]" ;
      "rule[STRING_LITERAL][97]" -> "STRING_LITERAL[98]" ;
      "rule[STRING_LITERAL][97]" -> "alternative[99]" ;
        "alternative[99]" -> "string_literal[100]" ;
        "alternative[99]" -> "string_literal[101]" ;
    "syntax" -> "rule[SPECIAL_SEQUENCE][102]" ;
      "rule[SPECIAL_SEQUENCE][102]" -> "SPECIAL_SEQUENCE[103]" ;
      "rule[SPECIAL_SEQUENCE][102]" -> "string_literal[104]" ;
    "syntax" -> "rule[COMMENT][105]" ;
      "rule[COMMENT][105]" -> "COMMENT[106]" ;
      "rule[COMMENT][105]" -> "string_literal[107]" ;
    "syntax" -> "string_literal[108]" ;
}
